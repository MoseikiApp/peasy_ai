// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phoneNumberWithCountryCode String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    userCredit    UserCredit?
    payments      Payment[]
    paymentIntents PaymentIntent[]
    chats         Chat[]
    financialActions FinancialChatAction[]
    wallet        UserWallet?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserCredit {
  id          String   @id @default(uuid())
  userId      String   @unique
  totalCredits Decimal @default(0) @db.Decimal(10, 2)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Payment {
  id              String   @id @default(uuid())
  userId          String
  creditAmount    Decimal  @db.Decimal(10, 2)
  amountPaid      Decimal  @db.Decimal(10, 2)
  currency        String   @db.VarChar(10)
  walletAddress   String   @db.VarChar(256)
  blockchainNetwork String @db.VarChar(100)
  transactionHash String   @db.VarChar(256)
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model PaymentIntent {
  id                String   @id @default(uuid())
  userId            String
  walletId          String   @db.VarChar(256)
  blockchainNetwork String   @db.VarChar(100)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  amount            Decimal  @db.Decimal(10, 2)
  currency          String   @db.VarChar(10) @default("ETH")
  amountInUsd       Decimal  @db.Decimal(10, 2) @default(0)
  status            String   @db.VarChar(50)
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([walletId])
  @@index([blockchainNetwork])
  @@index([status])
}

model Chat {
  id                 String               @id @default(uuid())
  accountId          String
  chatContent        String               @db.Text
  actor              String               @db.VarChar(50)
  date               DateTime             @default(now())
  chatReferenceId    String?
  financialActionId  String?
  chatExternalId     String?
  chatExternalConversationId   String?
  chatExternalProviderName     String?
  currentPhoneNumberWithCountryCode String?
  
  user               User                 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  referencedChat     Chat?                @relation("ChatReferences", fields: [chatReferenceId], references: [id])
  referencedBy       Chat[]               @relation("ChatReferences")
  financialAction    FinancialChatAction? @relation(fields: [financialActionId], references: [id])
  
  @@index([accountId])
  @@index([chatReferenceId])
  @@index([financialActionId])
}

model FinancialChatAction {
  id                              String    @id @default(uuid())
  accountId                       String
  actionType                      String    @db.VarChar(100)
  actionInputCurrency             String    @db.VarChar(50)
  actionInputNetwork              String    @db.VarChar(100)
  actionInputWallet               String    @db.VarChar(256)
  actionOutputCurrency            String    @db.VarChar(50)
  actionOutputWallet              String    @db.VarChar(256)
  actionOutputNetwork             String    @db.VarChar(100)
  actionApprovalType              String    @db.VarChar(100)
  actionApprovalReferenceId       String?   @db.VarChar(256)
  actionDate                      DateTime  @default(now())
  actionResult                    String?   @db.VarChar(100)
  actionResultData                String?   @db.Text
  actionResultUserFriendlyMessage String?   @db.Text
  actionResultDate                DateTime?
  actionInputWalletBalanceBefore  Decimal?  @db.Decimal(20, 8)
  actionInputWalletBalanceAfter   Decimal?  @db.Decimal(20, 8)
  actionOutputWalletBalanceBefore Decimal?  @db.Decimal(20, 8)
  actionOutputWalletBalanceAfter  Decimal?  @db.Decimal(20, 8)
  actionOutputWalletOwnerAccountId String?

  user                            User      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  chats                           Chat[]
  
  @@index([accountId])
  @@index([actionType])
  @@index([actionInputNetwork])
  @@index([actionOutputNetwork])
}

model AIAgentConfiguration {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(256) @unique
  providerName      String
  providerVersion      String  
  instruction String   @db.VarChar(10000)
  persona     String   @db.VarChar(1000)
  randomness  Decimal  @default(0.5) @db.Decimal(3, 2)
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
}

model UserWallet {
  id             String   @id @default(uuid())
  userId         String   @unique
  address        String   @db.VarChar(1256)
  provider       String   @db.VarChar(1256)
  network        String   @db.VarChar(1256)
  currency       String   @db.VarChar(256)
  encodedMnemonic String  @db.VarChar(1256)
  encodedPrivateKey String  @db.VarChar(1256)
  notes          String?  @db.Text
  lastOperations String?  @db.Text
  createdAt      DateTime @default(now())
  isActive       Boolean  @default(true)
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([address])
  @@index([network])
  @@index([isActive])
}

model RpcProvider {
  id         String  @id @default(uuid())
  name       String  @unique @db.VarChar(256)
  currency   String  @unique @db.VarChar(50)
  networkUrl String  @db.VarChar(1000)
  explorerUrl String  @db.VarChar(1000)
  notes      String? @db.Text
  isNative   Boolean @default(false)
  
  @@index([name])
  @@index([currency])
}

// Updated Token model with symbol as primary key and unique name
model CryptoErc20Token {
  symbol          String   @id @db.VarChar(50)  // Symbol as the primary key
  name            String   @unique @db.VarChar(256)  // Name is also unique
  contractAddress String   @db.VarChar(256)
  chainId         Int      
  decimals        Int      @default(18)
  logoURI         String?  @db.VarChar(1000)
  lastUpdated     DateTime @default(now())
  
  @@index([chainId])
  @@unique([symbol, chainId])  // Maintain unique composite index for symbol+chainId
}